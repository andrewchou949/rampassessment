{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n// Ensure this import path is correct\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [error, setError] = useState(null); // Ensure this matches the type definition\n\n  const fetchAll = useCallback(async () => {\n    try {\n      const employeesData = await fetchWithCache(\"employees\");\n\n      if (employeesData !== null) {\n        setEmployees(employeesData);\n        setError(null); // Reset the error on successful fetch\n      } else {\n        setError(\"Failed to fetch employees data.\"); // Set error when data is null (fetch failed)\n      }\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n  return {\n    data: employees,\n    loading,\n    fetchAll,\n    invalidateData,\n    error\n  }; // Include the error in the return value\n}\n\n_s(useEmployees, \"drfM/YpCreUQl/UfraQ22oHlx6c=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useEmployees","fetchWithCache","loading","employees","setEmployees","error","setError","fetchAll","employeesData","e","Error","message","invalidateData","data"],"sources":["/Users/andrewchou/Downloads/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { Employee } from \"../utils/types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { EmployeeResult } from \"./types\"; // Ensure this import path is correct\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [employees, setEmployees] = useState<Employee[] | null>(null);\n  const [error, setError] = useState<string | null>(null); // Ensure this matches the type definition\n\n  const fetchAll = useCallback(async () => {\n    try {\n      const employeesData = await fetchWithCache<Employee[]>(\"employees\");\n      if (employeesData !== null) {\n        setEmployees(employeesData);\n        setError(null); // Reset the error on successful fetch\n      } else {\n        setError(\"Failed to fetch employees data.\"); // Set error when data is null (fetch failed)\n      }\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n    }\n  }, [fetchWithCache]);\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n\n  return { data: employees, loading, fetchAll, invalidateData, error }; // Include the error in the return value\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAC0C;AAE1C,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAoB,IAApB,CAA1C;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAgB,IAAhB,CAAlC,CAH6C,CAGY;;EAEzD,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,IAAI;MACF,MAAMW,aAAa,GAAG,MAAMP,cAAc,CAAa,WAAb,CAA1C;;MACA,IAAIO,aAAa,KAAK,IAAtB,EAA4B;QAC1BJ,YAAY,CAACI,aAAD,CAAZ;QACAF,QAAQ,CAAC,IAAD,CAAR,CAF0B,CAEV;MACjB,CAHD,MAGO;QACLA,QAAQ,CAAC,iCAAD,CAAR,CADK,CACwC;MAC9C;IACF,CARD,CAQE,OAAOG,CAAP,EAAU;MACVH,QAAQ,CAACG,CAAC,YAAYC,KAAb,GAAqBD,CAAC,CAACE,OAAvB,GAAiC,2BAAlC,CAAR;IACD;EACF,CAZ2B,EAYzB,CAACV,cAAD,CAZyB,CAA5B;EAcA,MAAMW,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,YAAY,CAAC,IAAD,CAAZ;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAES,IAAI,EAAEV,SAAR;IAAmBD,OAAnB;IAA4BK,QAA5B;IAAsCK,cAAtC;IAAsDP;EAAtD,CAAP,CAvB6C,CAuByB;AACvE;;GAxBeL,Y;UACsBD,c"},"metadata":{},"sourceType":"module"}