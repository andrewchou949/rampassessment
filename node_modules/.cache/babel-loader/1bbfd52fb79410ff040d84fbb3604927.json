{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [error, setError] = useState(null); // Adding error state\n\n  const fetchAll = useCallback(async () => {\n    try {\n      const response = await fetchWithCache(\"paginatedTransactions\", {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n      });\n\n      if (response !== null) {\n        setPaginatedTransactions(previousResponse => {\n          if (previousResponse === null) {\n            return response;\n          }\n\n          return {\n            data: [...previousResponse.data, ...response.data],\n            // Assuming you want to append new transactions\n            nextPage: response.nextPage\n          };\n        });\n        setError(null); // Reset the error on successful fetch\n      } else {\n        setError(\"Failed to fetch paginated transactions data.\"); // Set error when data is null (fetch failed)\n      }\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    error\n  }; // Include the error in the return value\n}\n\n_s(usePaginatedTransactions, \"WPPgxH2pyZ0CQcrkXKQ8X8/wuBU=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","error","setError","fetchAll","response","page","nextPage","previousResponse","data","e","Error","message","invalidateData"],"sources":["/Users/andrewchou/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n  const [error, setError] = useState<string | null>(null); // Adding error state\n\n  const fetchAll = useCallback(async () => {\n    try {\n      const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        {\n          page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n        }\n      );\n\n      if (response !== null) {\n        setPaginatedTransactions((previousResponse) => {\n          if (previousResponse === null) {\n            return response;\n          }\n\n          return {\n            data: [...previousResponse.data, ...response.data], // Assuming you want to append new transactions\n            nextPage: response.nextPage,\n          };\n        });\n        setError(null); // Reset the error on successful fetch\n      } else {\n        setError(\"Failed to fetch paginated transactions data.\"); // Set error when data is null (fetch failed)\n      }\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, error }; // Include the error in the return value\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAgB,IAAhB,CAAlC,CAHsE,CAGb;;EAEzD,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;QACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACO;MADnE,CAFmC,CAArC;;MAOA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrBJ,wBAAwB,CAAEO,gBAAD,IAAsB;UAC7C,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;YAC7B,OAAOH,QAAP;UACD;;UAED,OAAO;YACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;YAC+C;YACpDF,QAAQ,EAAEF,QAAQ,CAACE;UAFd,CAAP;QAID,CATuB,CAAxB;QAUAJ,QAAQ,CAAC,IAAD,CAAR,CAXqB,CAWL;MACjB,CAZD,MAYO;QACLA,QAAQ,CAAC,8CAAD,CAAR,CADK,CACqD;MAC3D;IACF,CAvBD,CAuBE,OAAOO,CAAP,EAAU;MACVP,QAAQ,CAACO,CAAC,YAAYC,KAAb,GAAqBD,CAAC,CAACE,OAAvB,GAAiC,2BAAlC,CAAR;IACD;EACF,CA3B2B,EA2BzB,CAACd,cAAD,EAAiBE,qBAAjB,CA3ByB,CAA5B;EA6BA,MAAMa,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDS,cAAlD;IAAkEX;EAAlE,CAAP,CAtCsE,CAsCY;AACnF;;GAvCeL,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}