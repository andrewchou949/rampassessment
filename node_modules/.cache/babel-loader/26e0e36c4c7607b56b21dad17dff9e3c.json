{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [error, setError] = useState(null); // Adding error state\n\n  const fetchById = useCallback(async employeeId => {\n    try {\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n\n      if (data !== null) {\n        setTransactionsByEmployee(data);\n        setError(null); // Reset the error on successful fetch\n      } else {\n        setError(\"Failed to fetch transactions for the employee.\");\n      }\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    error\n  };\n}\n\n_s(useTransactionsByEmployee, \"1kZyZjCtQxua5YDtXCDXXGaCCQ0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","error","setError","fetchById","employeeId","data","e","Error","message","invalidateData"],"sources":["/Users/andrewchou/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null);\n  const [error, setError] = useState<string | null>(null); // Adding error state\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      try {\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          {\n            employeeId,\n          }\n        );\n\n        if (data !== null) {\n          setTransactionsByEmployee(data);\n          setError(null); // Reset the error on successful fetch\n        } else {\n          setError(\"Failed to fetch transactions for the employee.\"); \n        }\n      } catch (e) {\n        setError(e instanceof Error ? e.message : \"An unknown error occurred\");\n      }\n    },\n    [fetchWithCache]\n  );\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, error }; \n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAgB,IAAhB,CAAlC,CAHwE,CAGf;;EAEzD,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAC/B,wBAD+B,EAE/B;QACEO;MADF,CAF+B,CAAjC;;MAOA,IAAIC,IAAI,KAAK,IAAb,EAAmB;QACjBL,yBAAyB,CAACK,IAAD,CAAzB;QACAH,QAAQ,CAAC,IAAD,CAAR,CAFiB,CAED;MACjB,CAHD,MAGO;QACLA,QAAQ,CAAC,gDAAD,CAAR;MACD;IACF,CAdD,CAcE,OAAOI,CAAP,EAAU;MACVJ,QAAQ,CAACI,CAAC,YAAYC,KAAb,GAAqBD,CAAC,CAACE,OAAvB,GAAiC,2BAAlC,CAAR;IACD;EACF,CAnB0B,EAoB3B,CAACX,cAAD,CApB2B,CAA7B;EAuBA,MAAMY,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDM,cAApD;IAAoER;EAApE,CAAP;AACD;;GAjCeL,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}